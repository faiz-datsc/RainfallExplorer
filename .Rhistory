runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(rainfall_map)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
yearDropdown <- c("All Years", "2014", "2015", "2016", "2017", "2018", "2019", "2020")
yearDropdown[-1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
?absolutePanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rainfall_map
rainfall <- read.csv("data/rainfall.csv")
#Rename column for Rainfall(mm)
rainfall <- rainfall %>% dplyr::rename(Rainfall = 5)
#Rename State value
levels(rainfall$State)[levels(rainfall$State)=="Selangor-Wilayah"] <- "Federal Territory of Kuala Lumpur"
levels(rainfall$State)[levels(rainfall$State)=="NSembilan"] <- "Negeri Sembilan"
#Convert column to factor
rainfall$Year <- factor(rainfall$Year)
rainfall$Month <- factor(rainfall$Month)
rainfall$Day <- factor(rainfall$Day)
#Filter & calculate rainfall average function
calculate_rainfall_mean <- function(yearfilter = rainfall$Year, monthfilter = rainfall$Month, statefilter = rainfall$State){
if(yearfilter == "All Years")
yearfilter = rainfall$Year
if(monthfilter == "All Months")
monthfilter = rainfall$Month
rainfallfilter <- rainfall %>% filter(Year == yearfilter, Month == monthfilter, State == statefilter)
mean(rainfallfilter$Rainfall)
}
#Tabulate list of state & average rainfall for leaflet map coloring
rainfall_map <- as.data.frame(table(rainfall$State)) %>% dplyr::rename(State = 1) %>% select(State)
for( i in rownames(rainfall_map) )
rainfall_map[i, "Rainfall"] <- calculate_rainfall_mean(statefilter = rainfall_map[i, "State"])
rainfall_map
rainfall_map %>% mutate(x, Rainfall*100)
rainfall_map %>% mutate(rainfall$x, Rainfall*100)
rainfall_map %>% mutate(rainfall$Condition, ifelse(x>500, 'OK', 'Not OK'))
rainfall_map %>% mutate(rainfall$Condition, ifelse(rainfall$x>500, 'OK', 'Not OK'))
rainfall_map %>% mutate(rainfall$Condition, ifelse(rainfall[3]>500, 'OK', 'Not OK'))
rainfall_map
mutate(rainfall_map, Condition = ifelse(Rainfall<5, "Good", "Bad"))
rainfall_map
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#load Malaysia geojson
states <- geojsonio::geojson_read("data/my-states.geojson", what = "sp")
View(states)
View(states)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?absolutePanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plotOutput
runApp()
rsconnect::deployApp()
rsconnect::deployApp()
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
path <- "C:/Users/Faiz/Documents/UM/WQD7001 Principles of Data Science/Rainfall Explorer/RainfallExplorer"
setwd(path)
rainfall <- read.csv("data/rainfall.csv")
#Rename column for Rainfall(mm)
rainfall <- rainfall %>% dplyr::rename(Rainfall = 5)
#Rename State value
levels(rainfall$State)[levels(rainfall$State)=="Selangor-Wilayah"] <- "Federal Territory of Kuala Lumpur"
levels(rainfall$State)[levels(rainfall$State)=="NSembilan"] <- "Negeri Sembilan"
#Convert column to factor
rainfall$Year <- factor(rainfall$Year)
rainfall$Month <- factor(rainfall$Month)
rainfall$Day <- factor(rainfall$Day)
#Filter & calculate rainfall average function
calculate_rainfall_mean <- function(yearfilter = rainfall$Year, monthfilter = rainfall$Month, statefilter = rainfall$State){
if(yearfilter == "All Years")
yearfilter = rainfall$Year
if(monthfilter == "All Months")
monthfilter = rainfall$Month
rainfallfilter <- rainfall %>% filter(Year == yearfilter, Month == monthfilter, State == statefilter)
mean(rainfallfilter$Rainfall)
}
#Tabulate list of state & average rainfall for leaflet map coloring
rainfall_map <- as.data.frame(table(rainfall$State)) %>% dplyr::rename(State = 1) %>% select(State)
for( i in rownames(rainfall_map) )
rainfall_map[i, "Rainfall"] <- calculate_rainfall_mean(statefilter = rainfall_map[i, "State"])
View(rainfall_map)
View(rainfall_map)
runApp()
#load Malaysia geojson
states <- geojsonio::geojson_read("data/my-states.geojson", what = "sp")
states$name
rainfall_map$State
calculate_rainfall_mean("2020", "1", "Pahang")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pal3 <- colorBin("YlOrRd", domain = rainfall_map$Rainfall, bins = bins)
rainfall <- read.csv("data/rainfall.csv")
#Rename column for Rainfall(mm)
rainfall <- rainfall %>% dplyr::rename(Rainfall = 5)
#Rename State value
levels(rainfall$State)[levels(rainfall$State)=="Selangor-Wilayah"] <- "Federal Territory of Kuala Lumpur"
levels(rainfall$State)[levels(rainfall$State)=="NSembilan"] <- "Negeri Sembilan"
#Convert column to factor
rainfall$Year <- factor(rainfall$Year)
rainfall$Month <- factor(rainfall$Month)
rainfall$Day <- factor(rainfall$Day)
#Filter & calculate rainfall average function
calculate_rainfall_mean <- function(yearfilter = rainfall$Year, monthfilter = rainfall$Month, statefilter = rainfall$State){
if(yearfilter == "All Years")
yearfilter = rainfall$Year
if(monthfilter == "All Months")
monthfilter = rainfall$Month
rainfallfilter <- rainfall %>% filter(Year == yearfilter, Month == monthfilter, State == statefilter)
mean(rainfallfilter$Rainfall)
}
#Tabulate list of state & average rainfall for leaflet map coloring
rainfall_map <- as.data.frame(table(rainfall$State)) %>% dplyr::rename(State = 1) %>% select(State)
for( i in rownames(rainfall_map) )
rainfall_map[i, "Rainfall"] <- calculate_rainfall_mean(statefilter = rainfall_map[i, "State"])
#Coloring map
pal <- colorNumeric("YlGnBu", 1:12)
#Coloring barplot condition
pal2 <- c("Good" = "green", "Bad" = "red")
bins <- c(0, 2.5, 7.6, 10, 50, Inf)
pal3 <- colorBin("YlOrRd", domain = rainfall_map$Rainfall, bins = bins)
pal3
View(pal3)
View(pal3)
View(pal3)
View(pal3)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
?layersControlOptions
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
?acitionbutton
?actionbutton
?actionButton
?modalDialog
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?req()
?updateSelectInput
runApp()
runApp()
runApp()
Sys.Date
Sys.time
Sys.timezone()
format(Sys.time(), "%a %b %d %X %Y")
format(Sys.time(), "%Y")
runApp()
runApp()
format(Sys.time(), "%a %b %d %X %Y")
runApp()
?Sys.time
Sys.timezone()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
